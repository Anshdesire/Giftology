<?php
class UsersController extends AppController {
    
    public function beforeFilter() {
        parent::beforeFilter();
        $this->Auth->allow('add', 'logout');
    }
    public function login () {
        if ($this->request->is('post')) {
            if($this->Auth->login()) {
                $this->redirect($this->Auth->redirect());
            } else {
                $this->Session->setFlash(__('Invalid username and password'));
            }
        }
        $Facebook = new FB();
        $friends= $Facebook->api(array('method' => 'fql.query',
                                         'query' => 'SELECT uid, birthday, pic_big, name FROM user WHERE uid IN (SELECT uid2 from friend where uid1=me()) ORDER BY birthday'));
        $this->set('friends', $friends);
    }
    public function logout() {
        $this->redirect($this->Auth->logout()); 
    }
    public function index() {
        $this->User->recursive = 0;
        $this->set('users', $this->paginate());
    }
    public function view($id=null) {
        $this->User->id = $id;
        if(!$this->User->exists()) {
            throw new NotFoundException(__('Invalid User'));
        }
        $user = $this->User->find('first', array('conditions' => array('id' => $this->Auth->user('id'))));
        $this->set('user', $this->User->find(null, $id));
    }
    public function add() {
        if ($this->request->is('post')) {
            $this->User->create();
            $this->request->data['User']['utm_source'] = $this->request->query['utm_source'];
            $this->request->data['User']['utm_medium'] = $this->request->query['utm_medium'];

            if($this->User->save($this->request->data)) {
                $this->Session->setFlash(__('The user has been saved'));
                $this->redirect(array('action'=>'index'));
            } else {
                $this->Session->setFlash(__('User could not be saved'));
            }
        }
    }
    public function edit($id=null) {
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException(__('Invalid User'));
        }
        if($this->request->is('post') || $this->request->is('put')) {
            if ($this->User->save($this->request->data)) {
                $this->Session->setFlash(__('User saved'));
                $this->redirect(array('action'=>'index'));
            } else {
                $this->Session->setFlash(__('User could not be saved'));
            }
        } else {
            $this->request->data = $this->User->read(null, $id);
            unset($this->reqest->data['User']['password']);
        }
    }
    public function delete($id=null) {
        if (!$this->request->is('post')) {
            throw new MethodNotAllowedException();
        }
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException(__('User not found'));
        }
        if ($this->User->delete()) {
            $this->Session->setFlash(__('User deleted'));
            $this->redirect(array('action' => 'index'));
        }
        $this->Session->setFlash(__('User not deleted'));
        $this->redirect(array('action'=>'index'));
    }
    public function my_gifts() {
        $this->User->id = $this->Auth->user('id');
        if(!$this->User->exists()) {
            throw new NotFoundException(__('Invalid User'));
        }
        $userInfo =  $this->User->find('first', array('conditions' => array('id' => $this->Auth->user('id'))));
        $this->set('user', $userInfo);
    }
    function beforeFacebookSave() {
        $this->Connect->authUser['User']['email'] = $this->Connect->user('email');
        $this->Connect->authUser['User']['utm_source'] = $this->request->query['utm_source'];
        $this->Connect->authUser['User']['utm_medium'] = $this->request->query['utm_medium'];
        $this->Connect->authUser['User']['utm_campaign'] = $this->request->query['utm_campaign'];
        $this->Connect->authUser['User']['utm_term'] = $this->request->query['utm_term'];
        return true;
    }

    function beforeFacebookLogin($user) {
        //Logic to happen before a facebook login
    }

    function afterFacebookLogin() {
        //Logic to happen after successful facebook login.
    }
}
?>
